// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageURL        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bio             String?
  experience      Int?
  skills          String[]
  assessment      Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
}

model Assessment {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  questions      Json[]
  quizscore      Float
  category       String
  improvementTip String?

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.Text
  // atsScore Float?
  // feedback String?
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String

  @@index([userId])
}

model IndustryInsight {
  id       String @id @default(cuid())
  industry String @unique

  // createdAt   DateTime @default(now())
  // updatedAt   DateTime @updatedAt
  user         User[]
  salaryRanges Json[]

  growthRate  Float
  demandLevel DemandLevel
  topSkills   String[]

  marketOutlook MarketOutlook
  keyTrends     String[]

  recommendedSkills String[]

  lastUpdated DateTime @default(now())
  nextUpdated DateTime

  @@index([industry])
}

enum DemandLevel{
  LOW
  MEDIUM
  HIGH
}
enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}
